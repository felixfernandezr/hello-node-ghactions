name: Run npm test

on:
  push:
    branches: [main]

jobs:
  build-and-test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Setup Node.js environment
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Step 3: Cache Node.js dependencies
      - name: Cache Node.js dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 4: Install dependencies
      - name: Install Dependencies
        run: npm install

      # Step 5: Run tests
      - name: Run Tests
        run: npm test
      
      # Step 6: Upload test results as artifact
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: ./test-results/

  sonarqube-analysis:
    name: SonarQube Analysis
    runs-on: ubuntu-latest
    needs: build-and-test 

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SQ_HOST_URL }}

  docker-cd:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
#    needs: [build-and-test, sonarqube-analysis]

    steps:
      # Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Set up Docker Buildx (needed for multi-platform builds)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Scan Docker image with Trivy
#      - name: Scan Docker image with Trivy
#        uses: aquasecurity/trivy-action@0.28.0
#        with:
#          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/hello-world-node-app:latest
#          format: 'table'
#          exit-code: '1'
#          ignore-unfixed: true
#          vuln-type: 'os,library'
#          severity: 'CRITICAL,HIGH'

      # Log in to DockerHub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/hello-world-node-app:latest .

      # Push the Docker image to Docker Hub
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/hello-world-node-app:latest

      # Log in to GitHub Container Registry (GHCR)
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITH_TOKEN }}

      # Tag the Docker image for GHCR
      - name: Tag Docker image for GHCR
        run: |
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/hello-world-node-app:latest ghcr.io/${{ github.repository }}/hello-world-node-app:latest

      # Push the Docker image to GHCR
      - name: Push Docker image to GHCR
        run: |
          docker push ghcr.io/${{ github.repository }}/hello-world-node-app:latest     
          
       # Step 4: SSH into the Azure VM and deploy to Docker Swarm
      - name: Deploy to Docker Swarm
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SWARM_VM_HOST }}
          username: ${{ secrets.SWARM_VM_USER }}
          key: ${{ secrets.SWARM_VM_SSH_PRIVATE_KEY }}
          script: |
            docker service update \
              --image ghcr.io/${{ github.repository }}/hello-world-node-app:latest \
              --with-registry-auth \
              hello-node-docker-swarm-service || \
            docker swarm init \
            docker service create \
              --name hello-node-docker-swarm-service \
              --publish 80:80 \
              --with-registry-auth \
              ghcr.io/${{ github.repository }}/hello-world-node-app:latest
